name: Build

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    env:
      PREFIX: "/usr/local/"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-13] #ubuntu-20.04

    steps:
      - uses: actions/checkout@v4  # checkout gwplot
        with:
          fetch-depth: 0
          submodules: recursive
      - run: cd gw; git branch; git remote show origin; git fetch origin; git switch gw_dev; cd ../  # checkout gw_dev
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.0
        env:
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.9"
          CIBW_SKIP: "*-win32 *-manylinux_i686 pp* *musl* "
          CIBW_ARCHS_MACOS: "x86_64 arm64"  # arm64
          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=13.0 REPAIR_LIBRARY_PATH=./ci/build_gwplot  #/usr/local/lib
          CIBW_ARCHS_LINUX: "auto"
          CIBW_BEFORE_ALL_MACOS: |
            bash ci/osx-build-deps
            pip install -e . 
            install_name_tool -change libgw.dylib @loader_path/libgw.dylib gwplot/interface.cpython-*.so;
          CIBW_BEFORE_ALL_LINUX: bash ci/manylinux-build-deps
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH delocate-wheel -w {dest_dir} -v {wheel} # --require-archs x86_64
          #CIBW_REPAIR_WHEEL_COMMAND_LINUX: ""
#          CIBW_BEFORE_TEST_MACOS: |
#            pip install -r requirements.txt
#            pip install pillow matplotlib
#            bash ci/osx-run-deps
#          CIBW_BEFORE_TEST_LINUX: |
#            pip install -r requirements.txt
#            pip install pillow matplotlib
#            bash ci/manylinux-run-deps
          CIBW_TEST_COMMAND:  pip install -U numpy; python -c 'import gwplot'
          CIBW_TEST_SKIP: "*-macosx_arm64 *-macosx_universal2:arm64"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
