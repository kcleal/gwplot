
name: Build

on: [push, pull_request]

jobs:
  build_macOS_arm64:
    runs-on: macos-14
    env:
      _PYTHON_HOST_PLATFORM: "macosx-14.0-arm64"
      ARCHFLAGS: "-arch arm64"
      MACOSX_DEPLOYMENT_TARGET: "14.0"
      CPPFLAGS: "-I/usr/local/include"
      LDFLAGS: "-L/usr/local/lib"
    strategy:
      matrix:
        python-version: [ '3.12' ] # [ '3.9', '3.10', '3.11', '3.12', '3.13' ]

    steps:
      - name: Check architecture
        run: uname -m && arch

      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          brew update
          brew upgrade
          brew --prefix
          brew install fontconfig freetype glfw htslib jpeg-turbo libpng xz

      - name: Checkout gw
        run: |
          git submodule init
          git submodule update
          cd gw
          git checkout master
          git branch
          cd ../

      - name: Build gw submodule
        run: |
          cd ./gw
          make prep > /dev/null 2>&1
          CPPFLAGS+="-I$(brew --prefix)/include" LDFLAGS+="-L$(brew --prefix)/lib" make shared -j3
          cp lib/libgw/* $(brew --prefix)/lib
          cd ..

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel setuptools delocate
          python -m pip install -r requirements.txt

      - name: Build wheel file
        run: |
          CPPFLAGS+="-I$(brew --prefix)/include" LDFLAGS+="-L$(brew --prefix)/lib" pip wheel . --wheel-dir dist

      - name: Delocate wheel file
        run: |
          echo "Before delocate - wheel contents:"
          unzip -l dist/*.whl
          DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:$(brew --prefix)/lib delocate-wheel --require-archs arm64 -w dist -v dist/*.whl
          echo "After delocate - wheel contents:"
          unzip -l dist/*.whl

      - name: Install and test wheel
        run: |
          PYTHON_VERSION=${{ matrix.python-version }}
          PYTHON_VERSION_NO_DOT=$(echo $PYTHON_VERSION | tr -d '.')
          python${PYTHON_VERSION} -m venv .venv
          source .venv/bin/activate
          python -m pip install dist/*cp${PYTHON_VERSION_NO_DOT}*.whl
          python -c "import gwplot"
      - name: Archive wheel files
        uses: actions/upload-artifact@v4
        with:
          name: wheels_macOS_arm64
          path: dist/*.whl


#  build_macOS_intel:
#    runs-on: macos-latest
#    env:
#      _PYTHON_HOST_PLATFORM: "macosx-14-x86_64"
#      ARCHFLAGS: "-arch x86_64"
#      MACOSX_DEPLOYMENT_TARGET: "14"
#      CPPFLAGS: "-I/usr/local/include"
#      LDFLAGS: "-L/usr/local/lib"
#    strategy:
#      matrix:
#        python-version: [ '3.12' ] # [ '3.9', '3.10', '3.11', '3.12', '3.13' ]
#
#    steps:
#      - name: Check architecture
#        run: uname -m && arch
#
#      - uses: actions/checkout@v4
#        with:
#          submodules: 'recursive'
#
#      - name: Set up Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Install dependencies
#        run: |
#          brew update
#          brew upgrade
#          brew --prefix
#          brew install fontconfig freetype glfw htslib jpeg-turbo libpng xz
#
#      - name: Checkout gw
#        run: |
#          git submodule init
#          git submodule update
#          cd gw
#          git checkout master
#          git branch
#          cd ../
#
#      - name: Build gw submodule
#        run: |
#          cd ./gw
#          make prep > /dev/null 2>&1
#          CPPFLAGS+="-I$(brew --prefix)/include" LDFLAGS+="-L$(brew --prefix)/lib" make shared -j3
#          cp lib/libgw/* $(brew --prefix)/lib
#          cd ..
#
#      - name: Install Python dependencies
#        run: |
#          python -m pip install --upgrade pip
#          python -m pip install wheel setuptools delocate
#          python -m pip install -r requirements.txt
#
#      - name: Build wheel file
#        run: |
#          CPPFLAGS+="-I$(brew --prefix)/include" LDFLAGS+="-L$(brew --prefix)/lib" pip wheel . --wheel-dir dist
#
#      - name: Delocate wheel file
#        run: |
#          DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:$(brew --prefix)/lib delocate-wheel --require-archs x86_64 -w dist -v dist/*.whl
#
#      - name: Install and test wheel
#        run: |
#          PYTHON_VERSION=${{ matrix.python-version }}
#          PYTHON_VERSION_NO_DOT=$(echo $PYTHON_VERSION | tr -d '.')
#          python${PYTHON_VERSION} -m venv .venv
#          source .venv/bin/activate
#          python -m pip install dist/*cp${PYTHON_VERSION_NO_DOT}*.whl
#          python -c "import gwplot"
#
#      - name: Archive wheel files
#        uses: actions/upload-artifact@v3
#        with:
#          name: wheels_macOS_intel
#          path: dist/*.whl

#
  #
  #
  #
#
#  build_intel:
#    name: Build wheels on ${{ matrix.os }}
#    env:
#      PREFIX: "/usr/local/"
#      CPPFLAGS: "-I/usr/local/include"
#      LDFLAGS: "-L/usr/local/lib"
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [ubuntu-20.04]  #[ macOS-11, ubuntu-20.04 ] #
#
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          submodules: recursive
#
#      - name: Build wheels
#        uses: pypa/cibuildwheel@v2.16.0
#        env:
#          # note manylinux2014 has issues installing glfw3 due to clocktime definitions, hence newer manylinux used
#          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28  #manylinux2014
#          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.11" #, <3.11"
#          CIBW_SKIP: "*-win32 *-manylinux_i686 pp* *musl* "
#          CIBW_ARCHS_MACOS: "x86_64"  # arm64
#          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=11.0 REPAIR_LIBRARY_PATH=/usr/local/lib
#          CIBW_ARCHS_LINUX: "auto"
#          CIBW_BEFORE_ALL_MACOS: bash ci/osx-build-deps
#          CIBW_BEFORE_ALL_LINUX: |
#            yum install -y wget
#            wget https://repo.almalinux.org/almalinux/RPM-GPG-KEY-AlmaLinux
#            rpm --import RPM-GPG-KEY-AlmaLinux
#            bash ci/manylinux-build-deps
#          CIBW_REPAIR_WHEEL_COMMAND_MACOS: DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH delocate-wheel -w {dest_dir} -v {wheel} # --require-archs x86_64
#          #CIBW_REPAIR_WHEEL_COMMAND_LINUX: ""
##          CIBW_BEFORE_TEST_MACOS: |
##            pip install -r requirements.txt
##            pip install pillow matplotlib
##            bash ci/osx-run-deps
##          CIBW_BEFORE_TEST_LINUX: |
##            pip install -r requirements.txt
##            pip install pillow matplotlib
##            bash ci/manylinux-run-deps
#          CIBW_TEST_COMMAND:  "" #ldd --version; apt -y update; apt -y upgrade; pip install -U numpy; python -c 'import gwplot'
#          CIBW_TEST_SKIP: "*-macosx_arm64 *-macosx_universal2:arm64"
#
#      - uses: actions/upload-artifact@v4
#        with:
#          name: wheels_intel_macOS_manylinux
#          path: ./wheelhouse/*.whl
